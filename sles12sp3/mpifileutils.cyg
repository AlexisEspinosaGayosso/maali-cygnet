##############################################################################
# maali cygnet file for mpifileutils
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

mpiFileUtils is a suite of MPI-based tools to manage large datasets, which may
vary from large directory trees to large files. High-performance computing
users often generate large datasets with parallel applications that run with
many processes (millions in some cases). However those users are then stuck
with single-process tools like cp and rm to manage their datasets. This suite
provides MPI-based tools to handle typical jobs like copy, remove, and compare
for such datasets, providing speedups of up to 20-30x.

For further information see http://github.com/hpc/mpifileutils/

EOF

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_GCC_COMPILERS"

# URL to download the source code from, and to...
MAALI_URL="https://github.com/hpc/mpifileutils/archive/v${MAALI_TOOL_VERSION}.tar.gz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/mpifileutils-${MAALI_TOOL_VERSION}.tar.gz"

# where the unpacked source code
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/mpifileutils-${MAALI_TOOL_VERSION}"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="apps"

# tool pre-requisites
MAALI_TOOL_PREREQ="libcircle/0.2.1-rc.1 dtcmp/1.1.0 lwgrp/1.0.2 libarchive/3.3.2"
MAALI_TOOL_MPI_COMPILERS="$MAALI_DEFAULT_MPI intel-mpi/2017.0.4"

# tool build pre-requisites - not added to the module, only needed for building (loaded after MAALI_TOOL_PREREQ)
MAALI_TOOL_BUILD_PREREQ="autoconf/2.69"

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_MANPATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_PKG_CONFIG_PATH=1

MAALI_TOOL_MINOR_VERSION=`echo "$MAALI_TOOL_VERSION" | cut -d '.' -f 2`

#They shifted to CMake from 0.9 onwards
if [[ $MAALI_TOOL_MAJOR_VERSION -lt 1 && $MAALI_TOOL_MINOR_VERSION -lt 9 ]]; then
MAALI_TOOL_CONFIGURE='--enable-lustre --with-dtcmp=$MAALI_DTCMP_HOME MPICC=mpicc'
else
MAALI_TOOL_CONFIGURE='-DENABLE_LUSTRE:BOOL=ON -DMPIEXEC:STRING=srun -DMPIEXEC_MAX_NUMPROCS:STRING=224 -DMPIEXEC_NUMPROC_FLAG:STRING=-n'
MAALI_CMAKE_TOOL=1
fi

##############################################################################

function maali_pre_build {

cd $MAALI_TOOL_BUILD_DIR
if [[ $MAALI_TOOL_MAJOR_VERSION -lt 1 && $MAALI_TOOL_MINOR_VERSION -lt 9 ]]; then
./autogen.sh
fi
}

#DTCMP_Segmented_exscanv first appears in dtcmp/1.1.0.  This is required for mpifileutils > 0.7
#mpifileutils 0.7 can use dtcmp/1.0.3
